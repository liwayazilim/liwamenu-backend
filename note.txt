# QR_Menu Identity Roles & Access Control - Notes

## User Types and Access

### 1. Anonymous Users (Guests)
- Can browse restaurant menus and place orders without signing in.
- No account or authentication required.
- Orders are linked to the restaurant, not to a user account.

### 2. Restaurant Owner
- Manages their own restaurant(s): menu, orders, themes, etc.
- Can only access and manage their own data.
- Identity user with the `Owner` role.
- Actions protected by permission-based authorization.
- Data access filtered by the owner's user ID.

### 3. Dealer
- Can see/manage restaurants they have licensed.
- Can create and manage restaurant owners under their dealership.
- Identity user with the `Dealer` role.
- Actions protected by permission-based authorization.
- Data access filtered by the dealer's user ID and licensed restaurants.

### 4. Manager (Super Admin)
- Full access to all data and settings.
- Can manage users, restaurants, dealers, licenses, etc.
- Identity user with the `Manager` role.
- Actions protected by permission-based authorization.

---

## Implementation with Identity

- Use Identity roles: `Manager`, `Dealer`, `Owner` (seed these at startup).
- Use `[RequirePermission(Permissions.xxx.yyy)]` to restrict access based on fine-grained permissions.
- For actions that multiple roles can access, permissions are defined per role in the Roles.cs file.
- For Owners and Dealers, always filter data by their user ID and access scope.
- Allow unauthenticated users to place orders (guest orders).
- Only Owners, Dealers, and Managers need to register/sign in.
- Managers can create other users (Dealers, Owners) via the admin panel.

---

## Example: Orders Controller

```csharp
// Anyone (including guests) can place an order
[HttpPost("orders")]
[AllowAnonymous]
public async Task<IActionResult> PlaceOrder([FromBody] OrderDto dto) { ... }

// Only owners can see their own orders
[HttpGet("orders")]
[RequirePermission(Permissions.Orders.ViewOwn)]
public async Task<IActionResult> GetMyOrders() { ... }

// Only managers can see all orders
[HttpGet("orders/all")]
[RequirePermission(Permissions.Orders.ViewAll)]
public async Task<IActionResult> GetAllOrders() { ... }
```

---

## Summary Table

| Role      | Needs Account? | Can Place Orders? | Can Manage Restaurants? | Can See All Data? | Can Manage Users? |
|-----------|:--------------:|:-----------------:|:----------------------:|:-----------------:|:-----------------:|
| Guest     | No             | Yes               | No                     | No                | No                |
| Owner     | Yes            | Yes (their own)   | Yes (their own)        | No                | No                |
| Dealer    | Yes            | No                | Yes (licensed)         | No                | No                |
| Admin     | Yes            | No                | Yes (all)              | Yes               | Yes               |

---

## Next Steps
- Seed roles at startup.
- Protect endpoints with `[Authorize(Roles = ...)]`.
- Allow guest orders without authentication.
- Filter data by user role and ID.
- Only allow Admins to manage users and see all data. 